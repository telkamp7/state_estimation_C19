Pf <- 1/(1-a^2)
xif <- 10*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- pnorm(q = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = 1:K, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
mSMCsave
K <- 1000000
Pf <- 1/(1-a^2)
xif <- 10*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- pnorm(q = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = 1:K, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
mSMCsave
K <- 10000000
Pf <- 1/(1-a^2)
xif <- 10*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- pnorm(q = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = 1:K, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
mSMCsave
rm(list = ls())
# Generate data ---------------------------------------------------------------------
# x = a x + e
# y = x   + er
N <- 200
a <- 0.5
e <- rnorm(n = N)
x <- filter(e, c(1, -a))
Q <- 1e-2
er <- sqrt(Q)*runif(n = N)
y <- x + er
# Kalman filter ---------------------------------------------------------------------
mKalmanSave <- numeric(length = N)
mf <- 50
Pf <- 1/(1-a^2)
for(n in 1:N){
# Prediction
mpr <- a*mf
Ppr <- a*Pf*a+1
# Update
Omega <- Ppr + Q
KalmanG <- Omega/Ppr
mf <- mpr+KalmanG*(y[n]-mpr)
Pf <- (1-KalmanG)*Ppr
mKalmanSave[n] <- mf
}
mSMCsave <- numeric(length = N)
K <- 10000000
Pf <- 1/(1-a^2)
xif <- 10*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = 1:K, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
wftilde
mSMCsave
K <- 100
Pf <- 1/(1-a^2)
xif <- 10*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = 1:K, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
xipr
wftilde
xif <- 1*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = 1:K, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
mSMCsave <- numeric(length = N)
K <- 100
Pf <- 1/(1-a^2)
xif <- 1*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = 1:K, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
xif
rnorm(n = K)
rnorm(n = K)*sqrt(Pf)
mSMCsave
y[n]
dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
xipr
xif
xif+rnorm(n = K)
a * xif+rnorm(n = K)
xipr
mSMCsave <- numeric(length = N)
K <- 100
Pf <- 1/(1-a^2)
xif <- 1*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = xipr, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
mSMCsave
wftilde
y[n]
y
mSMCsave <- numeric(length = N)
rm(list = ls())
# Generate data ---------------------------------------------------------------------
# x = a x + e
# y = x   + er
N <- 200
a <- 0.5
e <- rnorm(n = N)
x <- filter(e, c(1, -a))
Q <- 1e-2
er <- sqrt(Q)*runif(n = N)
y <- x + er
# Kalman filter ---------------------------------------------------------------------
mKalmanSave <- numeric(length = N)
mf <- 50
Pf <- 1/(1-a^2)
for(n in 1:N){
# Prediction
mpr <- a*mf
Ppr <- a*Pf*a+1
# Update
Omega <- Ppr + Q
KalmanG <- Omega/Ppr
mf <- mpr+KalmanG*(y[n]-mpr)
Pf <- (1-KalmanG)*Ppr
mKalmanSave[n] <- mf
}
mSMCsave <- numeric(length = N)
K <- 100
Pf <- 1/(1-a^2)
xif <- 1*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = xipr, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
library(ggplot2)
dat <- data.frame(y = y, Kalman = mKalmanSave, SMC = mSMCsave)
dat <- data.frame(x = 1:N, y = y, Kalman = mKalmanSave, SMC = mSMCsave)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_line()
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_line()
dat
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_line()
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_line()
dat <- data.frame(x = 1:N, y = as.numeric(y), Kalman = mKalmanSave, SMC = mSMCsave)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_line()
x
dat <- data.frame(t = 1:N, y = as.numeric(y), Kalman = mKalmanSave, SMC = mSMCsave)
ggplot(data = dat, mapping = aes(x = t, y = y)) +
geom_line()
ggplot(data = dat, mapping = aes(x = t, y = y)) +
geom_line() +
geom_point(mapping = aes(y = Kalman, colour = "Kalman")) +
geom_point(mapping = aes(y = SMC, colour = "SMC"))
ggplot(data = dat, mapping = aes(x = t, y = y)) +
geom_line() +
geom_point(mapping = aes(y = Kalman, colour = "Kalman")) +
geom_point(mapping = aes(y = SMC, colour = "SMC")) +
scale_color_discrete(name = "Filter")
K <- 10000
Pf <- 1/(1-a^2)
xif <- 1*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = xipr, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
dat <- data.frame(t = 1:N, y = as.numeric(y), Kalman = mKalmanSave, SMC = mSMCsave)
ggplot(data = dat, mapping = aes(x = t, y = y)) +
geom_line() +
geom_point(mapping = aes(y = Kalman, colour = "Kalman")) +
geom_point(mapping = aes(y = SMC, colour = "SMC")) +
scale_color_discrete(name = "Filter")
ggplot(data = dat, mapping = aes(x = t, y = Kalman - SMC)) +
geom_line()
# Kalman filter ---------------------------------------------------------------------
mKalmanSave <- numeric(length = N)
mf <- 10
Pf <- 1/(1-a^2)
for(n in 1:N){
# Prediction
mpr <- a*mf
Ppr <- a*Pf*a+1
# Update
Omega <- Ppr + Q
KalmanG <- Omega/Ppr
mf <- mpr+KalmanG*(y[n]-mpr)
Pf <- (1-KalmanG)*Ppr
mKalmanSave[n] <- mf
}
mSMCsave <- numeric(length = N)
K <- 10000
Pf <- 1/(1-a^2)
xif <- 1*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = xipr, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
dat <- data.frame(t = 1:N, y = as.numeric(y), Kalman = mKalmanSave, SMC = mSMCsave)
ggplot(data = dat, mapping = aes(x = t, y = y)) +
geom_line() +
geom_point(mapping = aes(y = Kalman, colour = "Kalman")) +
geom_point(mapping = aes(y = SMC, colour = "SMC")) +
scale_color_discrete(name = "Filter")
ggplot(data = dat, mapping = aes(x = t, y = Kalman - SMC)) +
geom_line()
mf <- 1
Pf <- 1/(1-a^2)
for(n in 1:N){
# Prediction
mpr <- a*mf
Ppr <- a*Pf*a+1
# Update
Omega <- Ppr + Q
KalmanG <- Omega/Ppr
mf <- mpr+KalmanG*(y[n]-mpr)
Pf <- (1-KalmanG)*Ppr
mKalmanSave[n] <- mf
}
mSMCsave <- numeric(length = N)
K <- 10000
Pf <- 1/(1-a^2)
xif <- 1*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = xipr, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
dat <- data.frame(t = 1:N, y = as.numeric(y), Kalman = mKalmanSave, SMC = mSMCsave)
ggplot(data = dat, mapping = aes(x = t, y = y)) +
geom_line() +
geom_point(mapping = aes(y = Kalman, colour = "Kalman")) +
geom_point(mapping = aes(y = SMC, colour = "SMC")) +
scale_color_discrete(name = "Filter")
ggplot(data = dat, mapping = aes(x = t, y = Kalman - SMC)) +
geom_line()
K <- 100000
Pf <- 1/(1-a^2)
xif <- 1*rnorm(n = K)*sqrt(Pf)
for(n in 1:N){
# Prediction
xipr <- a * xif+rnorm(n = K)
# Update
wftilde <- dnorm(x = y[n], mean = xipr, sd = sqrt(Q))
wf <- wftilde/sum(wftilde)
xif <- sample(x = xipr, size = K, replace = TRUE, prob = wf)
mSMCsave[n] <- sum(wf*xipr)
}
dat <- data.frame(t = 1:N, y = as.numeric(y), Kalman = mKalmanSave, SMC = mSMCsave)
ggplot(data = dat, mapping = aes(x = t, y = y)) +
geom_line() +
geom_point(mapping = aes(y = Kalman, colour = "Kalman")) +
geom_point(mapping = aes(y = SMC, colour = "SMC")) +
scale_color_discrete(name = "Filter")
ggplot(data = dat, mapping = aes(x = t, y = Kalman - SMC)) +
geom_line()
install.packages("ctsmr", repos = "http://ctsm.info/repo/dev")
install.packages("ctsmr", repo = "http://ctsm.info/repo/dev")
version
install.packages("installr")
library(installr)
updateR()
install.packages("ctsmr", repos = c(ctsmr = "http://ctsm.info/repo/dev", getOption("repos")))
library(ctsmr)
obj <- ctsm()
# Add a system equation
obj$addSystem(dx ~ exp(logtheta)*(mu-x)*dt + exp(logsigma)*dw)
R.version
install.packages("ctsm")
install.packages("ctsmr")
install.packages("ctsmr", repos = c(ctsmr = "http://ctsm.info/repo/dev", getOption("repos")))
install.packages("ctsmr", repos = c(ctsmr = "http://ctsm.info/repo/dev", getOption("repos")))
library(ctsmr)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
fig.width = 12,
fig.height = 8,
fig.align = "center",
out.width="85%",
fig.pos = "H")
# Import libraries
library(ggplot2)
library(data.table)
library(RColorBrewer)
library(kableExtra)
library(ctsmr)
qt(p = 0.95, df = 10)
qt(p = 1-0.05/2, df = 5)
(log(0.5666)-6.5)/sqrt(13)
pnorm(q = -1.960339, mean = 0, sd = 1)
log(1*0.5/(1*0.5))
(log(1)-6.5)/sqrt(13)
pnorm(q = -1.802776, mean = 0, sd = 1)
source("~/.active-rstudio-document", echo=TRUE)
2*pnorm(q = -1.802776, mean = 0, sd = 1)
(log(1)-6.5)/sqrt(13)
2*pnorm(q = -1.802776, mean = 0, sd = 1)
(log(1)+6.5)/sqrt(13)
pnorm(q = 1.802776, mean = 0, sd = 1)
1-pnorm(q = 1.802776, mean = 0, sd = 1)
(log(1)-6.5)/sqrt(13)
2*pnorm(q = -1.802776, mean = 0, sd = 1)
(log(1)+6.5)/sqrt(13)
1-pnorm(q = 1.802776, mean = 0, sd = 1)
# Load libraries
library(readr)
library(KFAS)
library(glmmTMB)
library(tidyr)
library(dplyr)
setwd("C:/GIT/state_estimation_C19/")
# Load processed data
newly_admitted <- read_rds(file = "./data/processed/processed_data.rds")
## KFAS
mod1.KFAS <- SSModel(Total ~ 1 +
SSMarima(ar = 0, Q = 1),
data = newly_admitted, distribution = "poisson")
m1.out.KFAS <- KFS(model = mod1.KFAS,
filtering = c("state", "signal", "mean"),
nsim = 100)
m1.out.KFAS
plot(coef(m1.out.KFAS))
res <- rstandard(KFS(mod1.KFAS, filtering = "mean", smoothing = "none", nsim = 1000))
res
acf(res, na.action = na.pass())
acf(res, na.action = na.pass
)
acf(res, na.action = na.pass)
write_rds(x = m1.out.KFAS,
file = "./src/models/m1.out.KFAS.rds",
compress = "xz")
# Load libraries
library(readr)
library(KFAS)
library(glmmTMB)
library(tidyr)
library(dplyr)
library(purrr)
library(ggplot2)
library(RColorBrewer)
library(purrr)
# Load processed data
newly_admitted <- read_rds(file = "./data/processed/processed_data.rds")
regional_newly_admitted <- read_rds(file = "./data/processed/processed_regional_data.rds")
# Number of admissions in total
admitted_plot <- newly_admitted %>%
ggplot(mapping = aes(x = Dato, y = Total)) +
geom_point() +
labs(x = "Date [Days]", y = "Newly admitted [#]") +
theme_bw()
ggsave(plot = admitted_plot,
filename = "./reports/figures/newly_admitted_total.png",
dpi = "retina", width = 8, height = 4, units = "in")
# Number of admissions separated into regions
admitted_reg_plot <- ggplot(data = regional_newly_admitted, mapping = aes(x = Dato, y = count)) +
geom_point() +
facet_wrap(facets = vars(region), nrow = 2, ncol = 3) +
labs(x = "Date [Days]", y = "Newly admitted [#]") +
theme_bw()
ggsave(plot = admitted_reg_plot,
filename = "./reports/figures/newly_admitted_regions.png",
dpi = "retina", width = 12, height = 8, units = "in")
# Total
m1.glmmTMB <- read_rds(file = "./src/models/m1.glmmTMB.rds")
m1.out.KFAS <- read_rds(file = "./src/models/m1.out.KFAS.rds")
newly_admitted %>%
mutate(glmmTMB = residuals(m1.glmmTMB, type = "response"), KFAS = residuals(m1.out.KFAS, type = "response"),
glmmTMBP = predict(object = m1.glmmTMB, type = "response"), KFASP = m1.out.KFAS$muhat[,1]) %>%
select(Dato, Total, glmmTMB:KFASP)
mod.pred <- newly_admitted %>%
mutate(glmmTMB = predict(object = m1.glmmTMB, type = "response"), KFAS = m1.out.KFAS$muhat[,1]) %>%
select(Dato, glmmTMB, KFAS) %>%
pivot_longer(cols = c(glmmTMB, KFAS), names_to = "Model", values_to = "Prediction")
mod.pred
admitted_pred_plot <- admitted_plot +
geom_line(data = mod.pred, mapping = aes(x = Dato, y = Prediction, colour = Model, linetype = Model), linewidth = .8) +
scale_color_brewer(palette = "Paired")
admitted_pred_plot
admitted_pred_plot <- admitted_plot +
geom_line(data = mod.pred, mapping = aes(x = Dato, y = Prediction, colour = Model, linetype = Model), linewidth = .8) +
scale_color_brewer(palette = "Paired")
ggsave(plot = admitted_pred_plot,
filename = "./reports/figures/admitted_pred_plot.png",
dpi = "retina", width = 8, height = 4, units = "in")
# Random effects
mod.ranef <- newly_admitted %>%
mutate(glmmTMB = unlist(ranef(object = m1.glmmTMB)$cond$group),
KFAS = m1.out.KFAS$alphahat[,2]) %>%
select(Dato, glmmTMB, KFAS) %>%
pivot_longer(cols = -Dato, names_to = "Model", values_to = "Ranef")
latent_state_plot <- ggplot(data = mod.ranef, mapping = aes(x = Dato, y = Ranef, colour = Model, linetype = Model)) +
geom_line(linewidth = .8) +
scale_color_brewer(palette = "Paired") +
labs(x = "Date [days]", y = expression(paste("Random effect, ", u[t]))) +
theme_bw()
latent_state_plot
ggsave(plot = latent_state_plot,
filename = "./reports/figures/latent_state_plot.png",
dpi = "retina", width = 8, height = 4, units = "in")
residuals(m1.out.KFAS, type = "response")
# Residuals
mod.res <- newly_admitted %>%
mutate(glmmTMB = residuals(m1.glmmTMB, type = "response"), KFAS = residuals(m1.out.KFAS, type = "response")) %>%
select(Dato, glmmTMB, KFAS) %>%
pivot_longer(cols = -Dato, names_to = "Model", values_to = "Res")
residual_plot <- ggplot(data = mod.res, mapping = aes(x = Dato, y = Res, colour = Model, pch = Model)) +
geom_point() +
scale_color_brewer(palette = "Paired") +
labs(x = "Date [days]", y = expression(epsilon[t])) +
theme_bw()
residual_plot
ggsave(plot = residual_plot,
filename = "./reports/figures/residual_plot.png",
dpi = "retina", width = 8, height = 4, units = "in")
coef(object = m1.out.KFAS)
coef(object = m1.out.KFAS, last = TRUE)
coef(object = m1.glmmTMB)
coef(object = m1.glmmTMB, last = TRUE)
fixef(object = m1.glmmTMB)
ranef(object = m1.glmmTMB)
coef(object = m1.out.KFAS, last = TRUE)
#### Grouped by region ####
regional_newly_admitted <- read_rds(file = "./data/processed/processed_regional_data.rds")
regional_newly_admitted
# glmmTMB
m2.glmmTMB <- glmmTMB(formula = count ~ -1 + region + ar1(drift  + 0| region),
family = poisson(link = "log"),
data = regional_newly_admitted)
m2.glmmTMB
newly_admitted
nrow(newly_admitted)
newly_admitted$Dato[1]
?strftime
as.Date.POSIXct(x = newly_admitted$Dato[1], format = "%D")
as.Date.POSIXct(x = newly_admitted$Dato[1], format = "%F")
strftime(x = newly_admitted$Dato[1], format = "%F")
strftime(x = newly_admitted$Dato[1], format = "%D")
strftime(x = newly_admitted$Dato[1], format = "%Y")
strftime(x = newly_admitted$Dato[1], format = "%x%Y")
strftime(x = newly_admitted$Dato[1], format = "%e%Y")
strftime(x = newly_admitted$Dato[1], format = "%e, %Y")
strftime(x = newly_admitted$Dato[1], format = "%d of, %Y")
strftime(x = newly_admitted$Dato[1], format = "%d of %B, %Y")
strftime(x = newly_admitted$Dato[1], format = "%F")
strftime(x = newly_admitted$Dato[1], format = "%h")
newly_admitted
